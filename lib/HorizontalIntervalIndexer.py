# -*- coding: utf-8 -*-
"""
HorizontalIntervalIndexer.py
============================

A Python object to to interpret a NoteRestIndexed DataFrame. A new DataFrame is
created to find horizontal intervals in any given horizontal, or "melodic"
line via the VIS-Framework.

Author: Reiner Kramer	
Email: reiner@music.org
Updated: 04.20.2016

"""

import sys, os, music21, pyext, pandas
from vis.analyzers.indexers import noterest, interval

try:
	print("HorizontalIntervalIndexer.py was loaded.")
except:
	print("Loading HorizontalIntervalIndexer.py failed.")

class Get(pyext._class):
	"""
	HorizontalIntervalIndexer Module
	================================

	Get
	---

	Processes a DataFrame generated by the NoteRestIndexer, parses it, and 
	creates a new DataFrame that show all the horizontal intervals in a 
	particular part or stream.

	"""
	_inlets = 3
	_outlets = 3

	def __init__(self,df_paths=0,df_scores=0):
		"""
		Storing variables used in this class.
		"""
		self.df_paths = df_paths
		self.df_scores = df_scores

	def _anything_1(self,*noterest_df):
		"""
		Parses a note-rest-indexed DataFrame and show horizontal intervals.
		"""
		# Converting symbols to actual paths

		try:

			self.df_paths = [str(x) for x in noterest_df]
			
			print(self.df_paths[0])

			self.df_scores = pandas.read_csv(self.df_paths[0],
				header=0,
				index_col=0,
				encoding='utf-8')

			# self._outlet(1, self.df_score.head(7).to_csv(sep=' '))

			print self.df_scores.head(10).to_csv(sep=' ')

		except:
			print("O-M-G. Total Failure.")

