# -*- coding: utf-8 -*-
"""
HorizontalNGrams.py
===================

Filters a horizontal interval indexers output.

Author: Reiner Kramer	
Email: reiner@music.org
Updated: 05.30.2016

"""

import sys, os, music21, pyext, pandas

from vis.analyzers.indexers import noterest, interval

try:
	print("HorizontalNGrams.py was loaded.")
except:
	print("Loading HorizontalNGrams.py failed.")

class Get(pyext._class):
	"""
	Horizontal NGrams Module
	================================

	Get
	---

	Processes a DataFrame generated by the HorizontalIntervalIndexer, parses 
	it, and creates a new DataFrame that shows all the horizontal NGrams in a 
	particular part or stream. The main input type (inlet 1) is a 
	horizontal interval indexed pickled DataFrame.
	"""
	_inlets = 2
	_outlets = 1

	def __init__(self,
		nrdf=0,
		df_paths=0,
		df_scores=0,
		hint_scores=0,
		events=5,
		direction='beginning',
		slice_start=0,
		slice_end=5,
		meta=5,
		hint_settings=0,
		sample_rate=2):
		"""
		Storing variables used in this class.
		"""
		self.nrdf = nrdf
		self.df_paths = df_paths
		self.df_scores = df_scores
		self.hint_scores = hint_scores
		self.events = events
		self.direction = direction
		self.slice_start = slice_start
		self.slice_end = slice_end
		self.hint_settings = hint_settings
		self.sample_rate = sample_rate


	def _anything_1(self,*df_paths):
		"""
		Parses a note-rest-indexed DataFrame and show horizontal intervals.
		"""
		
		try:

			self.df_paths = [str(x) for x in df_paths]
			
			self.df_scores = [pandas.read_pickle(x) for x in self.df_paths]

			self.ngrams = [self._horizontal_ngrams(x, self.sample_rate)
				for x in self.df_scores]
			
			self.ngrams_reduced = [self._count_unique_ngrams(x, ordered=True) 
				for x in self.ngrams]

			self._print_ngrams(self.df_paths,self.ngrams_reduced)
			
		except Exception as e:
			
			print(e)

	def _anything_2(self,sample_rate):
		"""
		Changes the sample rate of ngrams.
		"""
		if(self.df_scores == 0):
			
			print("Please load horizontal interval indexed Dataframes first.")
		
		else:

			try:
				self.sample_rate = int(sample_rate)

				self.ngrams = [self._horizontal_ngrams(x, self.sample_rate)
					for x in self.df_scores]
				
				self.ngrams_reduced = [self._count_unique_ngrams(x, ordered=True) 
					for x in self.ngrams]

				self._print_ngrams(self.df_paths,self.ngrams_reduced)

			except Exception as e:
			
				print(e)

	'''
	def bang_1(self):
		"""
		Force pass DataFrame paths to next items, e.g.: filters.
		"""
		if(self.hint_scores == 0):
			self._outlet(1, self._msg_missing_scores())
		
		else:
			# self._outlet(1, "DataFrames exist.")
			print("The horizontally indexed DataFrames were re-indexed.")
			self._outlet(1, [str(x) for x in self.hint_scores])
	'''

	def _horizontal_ngrams(self, hint_scores, sample_rate):
		"""
		Creates horizontal ngrams.
		"""
		print(hint_scores['interval.HorizontalIntervalIndexer']['0'])
		'''
		hint_cols = [str(x) 
			for x in hint_scores['interval.HorizontalIntervalIndexer']['0']
			if (str(x) != 'Rest')]
		
		hint_cols = [str(x) for x in hint_scores]


		hint_cols_ng = []

		for x in range(len(hint_cols)):
			if x < (len(hint_cols) - (sample_rate - 1)):
				hint_cols_ng.append(hint_cols[x:(x+sample_rate)])

		return hint_cols_ng
		'''

	def _count_unique_ngrams(self,hints_ngrams,ordered=True):
		"""
		Counts N-Grams, removes duplicates, and sorts them in order of frequency.
		"""
		counted_ngrams = [(x, hints_ngrams.count(x)) for x in hints_ngrams]
		reduced_ngrams = [eval(y) for y in set([str(x) for x in counted_ngrams])]

		if(ordered == True):
			
			ordered_ngrams = sorted(reduced_ngrams, 
				key=lambda x: x[1], 
				reverse=True)
			
			return ordered_ngrams
		
		else:
			
			return reduced_ngrams

	def _print_ngrams(self, df_paths, ngrams_reduced):
		"""
		Prints NGrams in a readable format.
		"""
		for x, y in zip(df_paths,ngrams_reduced):
			self._generate_name(x)
			for z in y:
				print(str(z[0]) + ': ' + str(z[1]))

	def _generate_name(self,path):
		"""
		Private method to generate a human readable name of a composition from
		it path.
		"""
		file_name = os.path.split(path)
		file_extr = os.path.splitext(file_name[1])
		comp_name = str(file_extr[0]).replace("-"," ").replace("_",": ")

		print("\n" + comp_name)
		print(len(comp_name) * "-")


	
	def _msg_missing_scores(self):
		"""
		Method to indicate that no DataFrames have been loaded.
		"""
		return "Please load (a) note-rest-indexed DataFrame(s) first."
