# -*- coding: utf-8 -*-
"""
PitchDisplay.py
===============

A Python object to interpret a NoteRestIndexed DataFrame. The module can change
displays of pitches in a DataFrame.

Author: Reiner Kramer	
Email: reiner@music.org
Updated: 05.26.2016

"""

import sys, os, music21, pyext, pandas

from vis.analyzers.indexers import noterest, interval

try:
	print("PitchDisplay.py was loaded.")
except:
	print("PitchDisplay.py failed.")

class Convert(pyext._class):
	"""
	PitchDisplay Module
	===================

	Convert
	-------

	Processes a DataFrame generated by the NoteRestIndexer, and displays 
	pitches in various values.

	"""
	_inlets = 5
	_outlets = 1

	def __init__(self,
		nri_df=0,
		df_paths=0,
		df_scores=0,
		events=5,
		direction='beginning',
		slice_start=0,
		slice_end=5,
		pitch_name='nameWithOctave'):
		"""
		Storing variables used in this class.
		"""
		self.nri_df = nri_df
		self.df_paths = df_paths
		self.df_scores = df_scores
		self.events = events
		self.direction = direction
		self.slice_start = slice_start
		self.slice_end = slice_end
		self.pitch_name = pitch_name

	def _anything_1(self,*noterest_df):
		"""
		Parses note-rest-indexed DataFrames.
		"""	
		try:
			self.nri_df = noterest_df
			# Counting through the DataFrames and converting symbols to paths:
			self.df_paths = [str(x) for x in self.nri_df]
			# Un-pickeling DataFrames:
			self.df_scores = [pandas.read_pickle(self.df_paths[i]) 
				for i in range(len(self.df_paths))]
			# Printing information to Pd window.
			self._show_nri_df()

			'''
			# Building, saving DataFrames to pass on.
			file_paths = []
			for x,y in zip(self.df_paths,self.hint_df):
				# Build the path names, and save them into a list variable.
				file_name = os.path.split(x)
				file_path = (os.path.dirname(os.path.realpath(__file__)) + 
					'/data/frames/hint/Hint_' + file_name[1])
				file_paths.append(file_path)
				# Save the dataframes as pickle(d) files.
				y.to_pickle(file_path)

			self._outlet(1, [str(x) for x in file_paths])
			'''
		except Exception as e:
			print(e)

	def _anything_2(self,pitch_label):
		"""
		Assigns a pitch label to the global pitch_type variable.
		"""
		if(self.nri_df == 0):
			self._msg_missing_scores()
		else:
			self.pitch_name = str(pitch_label)
			self._show_nri_df()

	def _anything_3(self,events):
		"""
		Determines how many events are to be shown.
		"""
		if(self.nri_df == 0):
			self._msg_missing_scores()
		else:
			self.events = events
			# The beginning or the end of the DataFrame
			self._show_nri_df()

	def _anything_4(self,slice_start,slice_end):
		"""
		Picks a slice from a given DataFrame.
		"""
		if(self.nri_df == 0):
			self._msg_missing_score()
		else:
			for x, y in zip(self.df_paths,self.df_scores):
				self._generate_name(x)
				y.columns.set_levels(['Part'], level=0, inplace=True)
				y.columns.set_names(['Score','Events'], inplace=True)
				print(y.iloc[slice_start:slice_end].to_csv(
					sep='\t',
					na_rep='^'))

	def _anything_5(self,direction):
		"""
		Determines, whether the events are shown from the beginning or 
		the end.
		"""
		if(self.nri_df == 0):
			self._msg_missing_score()
		else:
			self.direction = str(direction)
			self._show_nri_df()
	'''

	def bang_1(self):
		"""
		Force pass DataFrame paths to next items, e.g.: filters.
		"""
		if(self.hint_df == 0):
			self._outlet(1, self._msg_missing_scores())
		
		else:
			# self._outlet(1, "DataFrames exist.")
			print("The horizontally indexed DataFrames were passed on.")
			self._outlet(1, [str(x) for x in self.hint_df])
	'''
	# ----- Local methods ----- #

	def _show_nri_df(self):
		"""
		Displays NoteRest Indexed Scores.
		"""
		for x, y in zip(self.df_paths,self.df_scores):
			self._generate_name(x)
			z = y.applymap(lambda p: self._convert_pitch(p, self.pitch_name))
			z.columns.set_levels(['Part'], level=0, inplace=True)
			z.columns.set_names(['Score','Events'], inplace=True)
			if(self.direction == 'end'):
				display = z.tail(self.events).to_csv(sep='\t', na_rep='^')
			else:
				display = z.head(self.events).to_csv(sep='\t', na_rep='^')
			print(display)		

	def _generate_name(self, path):
		"""
		Private method to generate a human readable name of a composition from
		it path.
		"""
		file_name = os.path.split(path)
		file_extr = os.path.splitext(file_name[1])
		comp_name = str(file_extr[0]).replace("-"," ").replace("_",": ")

		print("\n {0} (displayed in {1})".format(comp_name, self.pitch_name))
		print("{0}".format((len(comp_name) + len(self.pitch_name) + 10) * "-"))

	def _convert_pitch(self, pitch, pitch_type):
		"""
		Converts a particular pitch name to another pitch value.
		- "pitch" must be for example: C#4
		- "pitch_type" is the convert-to value (see pitch.Pitch in music21) like:
		  pitchClass, name, nameWithOctave, midi, frequency, ps, fullName, french,
		  german, italian, spanish, unicodeName, unicodeNameWithOctave, octave, 
		  diatonicNoteNum, accidental, alter, microtone, step
		"""
		try:
			return getattr(music21.pitch.Pitch(pitch), pitch_type)
		except:
			return pitch

	def _msg_missing_scores(self):
		"""
		Method to indicate that no DataFrames have been loaded.
		"""
		return "Please load (a) note-rest-indexed DataFrame(s) first."

# ----- END PitchDisplay.py ------------------------------------------------- #