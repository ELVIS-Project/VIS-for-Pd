# -*- coding: utf-8 -*-
"""
VerticalIntervalIndexer.py
==========================

A Python object to interpret a NoteRestIndexed DataFrame. A new DataFrame is
created to find vertical intervals in any given sounding simultaneity
line via the VIS-Framework.

Author: Reiner Kramer	
Email: reiner@music.org
Updated: 04.21.2016

"""

import sys, os, music21, pyext, pandas
from vis.analyzers.indexers import noterest, interval

try:
	print("VerticalIntervalIndexer.py was loaded.")
except:
	print("Loading VerticalIntervalIndexer.py failed.")

class Get(pyext._class):
	"""
	VerticalIntervalIndexer Module
	================================

	Get
	---

	Processes a DataFrame generated by the NoteRestIndexer, parses it, and 
	creates a new DataFrame that shows all the vertical intervals in a stream.
	The main input type (inlet 1) is a note-rest-indexed pickled DataFrame.

	"""
	_inlets = 3
	_outlets = 3

	def __init__(self,df_paths=0,df_scores=0,vint_df=0):
		"""
		Storing variables used in this class.
		"""
		self.df_paths = df_paths
		self.df_scores = df_scores
		self.vint_df = vint_df

	def _anything_1(self,*noterest_df):
		"""
		Parses a note-rest-indexed DataFrame and show horizontal intervals.
		"""
		
		try:
			msg = ("Vertical interval music analysis:")
			print("\n" + msg + "\n" + len(msg) * "=")
			# Counting through the dataframes and converting symbols to paths:
			self.df_paths = [str(x) for x in noterest_df]

			'''
			for x in self.df_paths:
				print(x)
			'''

			# Choosing DataFrame:
			self.df_scores = [pandas.read_pickle(self.df_paths[i]) 
				for i in range(len(self.df_paths))]
			
	   		# Showing the vertical intervals.
			# not sure why mulitprocessing has to be turned off :-/
			settings = {'mp':False,'horiz_attach_later':False}	
			self.vint_df = [interval.IntervalIndexer(x,
				settings).run() for x in self.df_scores]
			
			for x, v, w in zip(self.df_paths,self.vint_df,self.df_scores):
				file_name = os.path.split(x)
				file_extr = os.path.splitext(file_name[1])
				comp_name = str(file_extr[0]).replace("-"," ")
				print("\n" + comp_name.replace("_",": "))
				print(len(comp_name) * "-")
				print(w.head(5).to_csv(
					sep='\t',
					na_rep='^'))
				print(v.head(5).to_csv(
					sep='\t',
					na_rep='^'))
			
		except ValueError:
			print("The pickled DataFrames passed in where not polyphonic.")

	def _generate_name(self,path):
		"""
		Private method to generate a human readable name of a composition from
		it path.
		"""
		file_name = os.path.split(path)
		file_extr = os.path.splitext(file_name[1])
		comp_name = str(file_extr[0]).replace("-"," ").replace("_",": ")

		return comp_name

	def _pd_window_msg(self,path):
		"""
		Private method to generate human readable messages for the Pd window.
		"""
