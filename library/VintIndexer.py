# -*- coding: utf-8 -*-

"""
VintIndexer.py
==============

Portmanteau for:

Vertical Interval Indexer
-        ---      -------

(in honor of Humdrum)

Indexes vertical intervals from a given dataframe to vertical interval
dataframe.

Author: Reiner Kramer	
Email: reiner@music.org
Updated: 11.18.2016

"""

import sys, os, music21, pandas, requests, vis, pyext
from vis.models.indexed_piece import Importer

try:
	print("VintIndexer.py was loaded.")
except:
	print("Loading VintIndexer.py failed.")

class Get(pyext._class):
	"""
	VerticalIntervalIndexer Module
	================================

	Get
	---

	Processes a DataFrame generated by the NoteRestIndexer, parses it, 
	and creates a new DataFrame that shows all the vertical intervals in 
	a stream. The main input type (inlet 1) is a note-rest-indexed 
	pickled DataFrame.

	"""
	_inlets = 6
	_outlets = 1

	def __init__(self,
		scores_paths=0,
		scores_imported=0,
		scores_mto=0,
		meta=0,
		vints=0,
		df_paths=[],
		events=5,
		direction='beginning',
		slice_start=0,
		slice_end=5):

		"""
		Storing variables used in this class.
		"""
		self.scores_paths = scores_paths
		self.scores_imported = scores_imported
		self.scores_mto = scores_mto
		self.meta = meta
		self.mto_frozen_dir = (os.path.dirname(os.path.realpath(__file__)) 
			+ '/data/music21streams/')
		self.vints = vints
		self.vint_settings = {
			'simple or compound':'simple',
			'quality': False,
			'directed': True,
			'mp':False,
			'horiz_attach_later':False
		}
		self.df_paths = df_paths
		self.events = events
		self.direction = direction
		self.slice_start = slice_start
		self.slice_end = slice_end


	def _anything_1(self,*symbolic_scores):
		"""
		Parses a note-rest-indexed DataFrame and shows vertical intervals.
		"""
		
		try:
			msg = ("Vertical interval music analysis:")
			print("\n" + msg + "\n" + len(msg) * "=")

			# Convert score paths from symbols to strings:
			self.scores_paths = [str(x) for x in symbolic_scores]
			
			# Import scores from score paths:
			self.scores_imported = [Importer(x) for x in self.scores_paths]

			# Collect Music21 streams for meta data purposes:
			self.scores_mto = [x._score for x in self.scores_imported]

			# Capture meta data from Music21 streams:
			self.meta = [(x.metadata.composer + "_" + 
				x.metadata.title).replace(" ", "-") 
				for x in self.scores_mto]

			# Freeze Music21 streams for later consumption:
			self.scores_mto_frozen = [music21.converter.freeze(
				self.scores_mto[i], fmt='pickle', fp=(self.mto_frozen_dir + 
				self.meta[i] + '.pgz'))
				for i in range(len(self.scores_mto))]
			
			# Build dataframes holding vertical intervals:
			self.vints = [x.get_data('vertical_interval', 
				self.vint_settings) 
				for x in self.scores_imported]

			# Save Vertical Indexed DataFrames:
			for i in range(len(self.vints)):
				
				# Build the path names, and save into a list.
				self.df_paths.append(
					os.path.dirname(os.path.realpath(__file__)) + 
					'/data/frames/vints/' + self.meta[i] + '.pkl')

				# Save the dataframes as pickle(d) files.
				self.vints[i].to_pickle(self.df_paths[i])
			
			# Renaming the columns to a more user friendly format:
			for x, y in zip(self.df_paths,self.vints):
				self._generate_name(x)
				
				y.columns.set_levels(['Part'], level=0, inplace=True)
				y.columns.set_names(['Score','Events'], inplace=True)
				print(y.head(self.events).to_csv(
					sep='\t',
					na_rep='^'))

		except Exception as e:
			
			print(e)

	def _anything_2(self,events):
		"""
		Determines how many events are to be shown.
		"""
		if(self.vints == 0):
			self._msg_missing_scores()
		else:
			self.events = events
			# The beginning or the end of the DataFrame
			self._heads_or_tails()

	def _anything_3(self,direction):
		"""
		Determines, whether the events are shown from the beginning or 
		the end.
		"""
		if(self.vints == 0):
			self._msg_missing_scores()
		else:
			self.direction = str(direction)
			self._heads_or_tails()

	def _anything_4(self,slice_start,slice_end):
		"""
		Picks a slice from a given DataFrame.
		"""
		if(self.vints == 0):
			self._msg_missing_scores()
		else:
			for x, y in zip(self.df_paths,self.vints):
				self._generate_name(x)
				y.columns.set_levels(['Part'], level=0, inplace=True)
				y.columns.set_names(['Score','Events'], inplace=True)
				print(y.iloc[slice_start:slice_end].to_csv(
					sep='\t',
					na_rep='^'))

	def _anything_5(self,*vint_settings):
		"""
		Settings as adopted from the VIS-framework.
		"""
		self.vint_settings = {

			'simple or compound': str(vint_settings[0]),
			'quality': eval(str(vint_settings[1])),
			'directed': eval(str(vint_settings[2])),
			'mp': eval(str(vint_settings[3])),
			'horiz_attach_later': eval(str(vint_settings[4]))		

		}

		# Build dataframes holding vertical intervals:
		self.vints = [x.get_data('vertical_interval', 
			self.vint_settings) 
			for x in self.scores_imported]
		
		self._heads_or_tails()

	def bang_1(self):
		"""
		Force pass DataFrame paths to next items, e.g.: filters.
		"""
		if(self.vints == 0):
			self._outlet(1, self._msg_missing_scores())
		
		else:
			# self._outlet(1, "DataFrames exist.")
			print("The vertical interval DataFrames were passed on.")
			self._outlet(1, [str(x) for x in self.df_paths])
	
	def _generate_name(self,path):
		"""
		Private method to generate a human readable name of a composition from
		it path.
		"""
		file_name = os.path.split(path)
		file_extr = os.path.splitext(file_name[1])
		comp_name = str(file_extr[0]).replace("-"," ").replace("_",": ")

		print("\n" + comp_name)
		print(len(comp_name) * "-")

	def _heads_or_tails(self):
		"""
		Helper method to determine whether to count from the beginning
		or from the end of the DataFrame.
		"""
		for x, y in zip(self.df_paths,self.vints):
			
			self._generate_name(x)

			y.columns.set_levels(['Part'], level=0, inplace=True)
			y.columns.set_names(['Score','Events'], inplace=True)

			if(self.direction == 'end'):
				display = y.tail(self.events).to_csv(sep='\t', na_rep='^')
			else:
				display = y.head(self.events).to_csv(sep='\t', na_rep='^')
			
			print(display)

	def _msg_missing_scores(self):
		"""
		Method to indicate that no DataFrames have been loaded.
		"""
		return "Please load (a) note-rest-indexed DataFrame(s) first."
